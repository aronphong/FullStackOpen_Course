{"version":3,"sources":["Services/PersonService.js","Components/Person.js","Components/PersonSearch.js","Components/PersonAdd.js","Components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","put","delete","Person","person","deletePersonHandler","name","number","onClick","PersonSearch","searchName","handleNameSearch","type","value","onChange","PersonAdd","addPerson","handleNameChange","handleNumberChange","onSubmit","Notification","message","messageType","className","App","useState","persons","setPersons","setNewPerson","setSearchName","setMessage","useEffect","personService","initialPersons","newPersons","filter","catch","error","text","personsToShow","toLowerCase","indexOf","event","target","preventDefault","map","returnedPerson","alert","length","concat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9eb662f9.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"http://localhost:3001/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst createPerson = (newPerson) => {\n  const request = axios.post(baseUrl, newPerson);\n  return request.then((response) => response.data);\n};\n\nconst updatePerson = (id, newPerson) => {\n  const request = axios.put(`${baseUrl}/${id}`, newPerson);\n  return request.then((response) => response.data);\n};\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, createPerson, updatePerson, deletePerson };\n","import React from \"react\";\n\nconst Person = ({ person, deletePersonHandler }) => {\n  return (\n    <li>\n      {person.name} {person.number}\n      <button onClick={() => deletePersonHandler(person.id)}>\n        Delete Contact\n      </button>\n    </li>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\n\nconst PersonSearch = ({ searchName, handleNameSearch }) => {\n  return (\n    <div>\n      <p>Search for a contact</p>\n      <input type='text' value={searchName} onChange={handleNameSearch} />\n    </div>\n  );\n};\n\nexport default PersonSearch;\n","import React from \"react\";\n\nconst PersonAdd = ({\n  addPerson,\n  newPerson,\n  handleNameChange,\n  handleNumberChange,\n}) => {\n  return (\n    <div>\n      <h2>Add New Contact</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name:{\" \"}\n          <input\n            value={newPerson.name}\n            onChange={handleNameChange}\n            type='text'\n          />\n        </div>\n        <div>\n          Number:{\" \"}\n          <input\n            value={newPerson.number}\n            onChange={handleNumberChange}\n            type='number'\n          />\n        </div>\n        <div>\n          <button type='submit'>add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PersonAdd;\n","import React from \"react\";\n\nconst Notification = ({ message, messageType }) => {\n  if (message === null) {\n    return null;\n  }\n  return <h1 className={messageType}>{message}</h1>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./Services/PersonService\";\nimport Person from \"./Components/Person\";\nimport PersonSearch from \"./Components/PersonSearch\";\nimport PersonAdd from \"./Components/PersonAdd\";\nimport Notification from \"./Components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newPerson, setNewPerson] = useState({});\n  const [searchName, setSearchName] = useState(\"\");\n  const [message, setMessage] = useState({});\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = (event) => {\n    setNewPerson({ ...newPerson, name: event.target.value });\n  };\n\n  const handleNumberChange = (event) => {\n    setNewPerson({ ...newPerson, number: event.target.value });\n  };\n\n  const handleNameSearch = (event) => {\n    setSearchName(event.target.value);\n  };\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    persons.map((person) => {\n      if (person.name === newPerson.name) {\n        if (person.number !== newPerson.number) {\n          return personService\n            .updatePerson(person.id, newPerson)\n            .then((returnedPerson) => {\n              setPersons(\n                persons.map((person) => {\n                  return person.id !== returnedPerson.id\n                    ? person\n                    : returnedPerson;\n                })\n              );\n            });\n        }\n        return alert(`${newPerson.name} is already in the phonebook`);\n      }\n    });\n\n    persons.filter((person) => person.name === newPerson.name).length <= 0 &&\n      personService.createPerson(newPerson).then((returnedPerson) => {\n        setMessage({\n          text: `${returnedPerson.name} added`,\n          messageType: \"success\",\n        });\n        setNewPerson({ name: \"\", number: 0 });\n        return setPersons(persons.concat(returnedPerson));\n      });\n  };\n\n  const deletePersonHandler = (id) => {\n    const newPersons = persons.filter((person) => person.id !== id);\n    personService\n      .deletePerson(id)\n      .then(() => setPersons(newPersons))\n      .catch((error) => {\n        setMessage({\n          text: `Contact was already removed from server`,\n          messageType: \"error\",\n        });\n      });\n  };\n\n  const personsToShow =\n    searchName === \"\"\n      ? persons\n      : persons.filter((person) => {\n          return (\n            person.name.toLowerCase().indexOf(searchName.toLowerCase()) !== -1\n          );\n        });\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message.text} messageType={message.messageType} />\n      <PersonSearch\n        searchName={searchName}\n        handleNameSearch={handleNameSearch}\n      />\n      <PersonAdd\n        addPerson={addPerson}\n        newPerson={newPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <ul>\n        {personsToShow.map((person) => {\n          return (\n            <Person\n              className='person'\n              key={person.name}\n              person={person}\n              deletePersonHandler={deletePersonHandler}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}